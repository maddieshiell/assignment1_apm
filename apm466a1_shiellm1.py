# -*- coding: utf-8 -*-
"""APM466A1_shiellm1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TO9MUt-hCEykexVTC8_aLys7Y5IQaJ6f

APM466 Assignment 1 


Due: February 8, 2021
"""

!pip install bond-pricing

import bond_pricing

# Importing packages
import numpy as np
import pandas as pd
import math
import seaborn as sns 
import matplotlib.pyplot as plt
import datetime
import scipy.optimize as optimize
from scipy.interpolate import interp1d
from numpy import linalg as LA

# Import data collected from https://markets.businessinsider.com/
url = 'https://raw.githubusercontent.com/maddieshiell/assignment1_apm/main/APMDataA1_2.csv'
df_data = pd.read_csv(url)
df_data.head()  # Print a sample of the data

df_data.shape

columns_to_drop = ['Unnamed: 15','Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18']
df_data = df_data.drop(columns=columns_to_drop)
df_data.head()

df_data = df_data[:36]

df_data.tail()

end_date = datetime.datetime(2021,2,1)

df

# df_data['Maturity_Date'][0][5:7]

df_data['num_months'] = df_data['Maturity_Date']

for i in range(0,len(df_data)):
  df_data['num_months'][i] = -((end_date.year - int(df_data['Maturity_Date'][i][0:4])) * 12 + end_date.month - int(df_data['Maturity_Date'][i][5:7]))

bond_pricing.bond_price_breakup(settle, cpn, mat, yld=0.0007685331695580366, freq=2, comp_freq=2, face=100, redeem=None, daycount=None, return_dataframe=False)

#Chosen bonds to calculate yield curve
isin_list = ['CA135087K296','CA135087K601','CA135087L286','CA135087L773','CA135087A610','CA135087J546','CA135087J967','CA135087K528','CA135087K940','CA135087L518']

df = df_data.loc[df_data['ISIN'].isin(isin_list)]

df["ytm18-Jan"] = df["18-Jan"] * 0
df["ytm19-Jan"] = df["18-Jan"] * 0
df["ytm20-Jan"] = df["18-Jan"] * 0
df["ytm21-Jan"] = df["18-Jan"] * 0
df["ytm22-Jan"] = df["18-Jan"] * 0
df["ytm25-Jan"] = df["18-Jan"] * 0
df["ytm26-Jan"] = df["18-Jan"] * 0
df["ytm27-Jan"] = df["18-Jan"] * 0
df["ytm28-Jan"] = df["18-Jan"] * 0
df["ytm29-Jan"] = df["18-Jan"] * 0

df = df.reset_index()

settle = '2021-01-18'
mat = '2021-08-01'
cpn = 0.0150
price = 100.76
freq = 2
# Default daycount is Actual/365
bond_pricing.bond_yield(settle, cpn, mat, price, freq, comp_freq=2, face=100, redeem=None, daycount=None, guess=0.01)

df['Maturity_Date'][i]

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
  for i in range(0,len(df)):
    if elem == '18-Jan':
      date = '2021-01-18'
    elif elem == '19-Jan':
      date = '2021-01-19'
    elif elem == '20-Jan':
      date = '2021-01-20'
    elif elem == '21-Jan':
      date = '2021-01-21'
    elif elem == '22-Jan':
      date = '2021-01-22'
    elif elem == '25-Jan':
      date = '2021-01-25'
    elif elem == '26-Jan':
      date = '2021-01-26'
    elif elem == '27-Jan':
      date = '2021-01-27'
    elif elem == '28-Jan':
      date = '2021-01-28'
    elif elem == '29-Jan':
      date = '2021-01-29'
    settle = date
    mat = df['Maturity_Date'][i]
    cpn = df['Coupon'][i]
    price = df[elem][i]
    freq = 2
    # Default daycount is Actual/365
    df['ytm' + elem][i] = bond_pricing.bond_yield(settle, cpn, mat, price, freq, comp_freq=2, face=100, redeem=None, daycount=None, guess=0.01)

from scipy import interpolate
x = df['num_months']/12
y1 = df['ytm18-Jan']
y2 = df['ytm19-Jan']
y3 = df['ytm20-Jan']
y4 = df['ytm21-Jan']
y5 = df['ytm22-Jan']
y6 = df['ytm25-Jan']
y7 = df['ytm26-Jan']
y8 = df['ytm27-Jan']
y9 = df['ytm28-Jan']
y10 = df['ytm29-Jan']

x_new = np.linspace(0.5, 5.1, 1000)
a_BSpline1 = interpolate.make_interp_spline(x, y1)
y_new1 = a_BSpline1(x_new)
a_BSpline2 = interpolate.make_interp_spline(x, y2)
y_new2 = a_BSpline2(x_new)
a_BSpline3 = interpolate.make_interp_spline(x, y3)
y_new3 = a_BSpline3(x_new)
a_BSpline4 = interpolate.make_interp_spline(x, y4)
y_new4 = a_BSpline4(x_new)
a_BSpline5 = interpolate.make_interp_spline(x, y5)
y_new5 = a_BSpline5(x_new)
a_BSpline6 = interpolate.make_interp_spline(x, y6)
y_new6 = a_BSpline6(x_new)
a_BSpline7 = interpolate.make_interp_spline(x, y7)
y_new7 = a_BSpline7(x_new)
a_BSpline8 = interpolate.make_interp_spline(x, y8)
y_new8 = a_BSpline8(x_new)
a_BSpline9 = interpolate.make_interp_spline(x, y9)
y_new9 = a_BSpline9(x_new)
a_BSpline10 = interpolate.make_interp_spline(x, y10)
y_new10 = a_BSpline10(x_new)

plt.plot(x_new, y_new1)
plt.plot(x_new, y_new2)
plt.plot(x_new, y_new3)
plt.plot(x_new, y_new4)
plt.plot(x_new, y_new5)
plt.plot(x_new, y_new6)
plt.plot(x_new, y_new7)
plt.plot(x_new, y_new8)
plt.plot(x_new, y_new9)
plt.plot(x_new, y_new10)

plt.legend(["Jan 18", "Jan 19", "Jan 20", "Jan 21", "Jan 22", "Jan 25", "Jan 26", "Jan 27", "Jan 28", "Jan 29"])
plt.xlabel('Term to Maturity (years)')
plt.ylabel('Yield to Maturity (YTM) in decimal')
plt.title('Yield to Maturity on 0-5 Year Canadian Government Bonds')

"""Spot Curve Calculation"""

def calculating_spot_rates(price, par, T, cpn, prev_spot_rate, guess = 0.01):

    T = T/12
    cpn = cpn/2 * par

    if T == 1:
      spot_func = lambda y: (cpn)/(1 + prev_spot_rate)**1 + (cpn+par)/(1 + y)**2 - price
    elif T == 1.5:
      spot_func = lambda y: (cpn)/(1+prev_spot_rate[:-1][0])**1 + (cpn)/(1 + prev_spot_rate[1])**2 + (cpn+par)/(1+y)**3 - price
    elif T == 2:
      spot_func = lambda y: (cpn)/(1+prev_spot_rate[:-2][0])**1 + (cpn)/(1+prev_spot_rate[1])**2 + (cpn)/(1+prev_spot_rate[2])**3 + (cpn+par)/(1+y)**4 - price
    elif T == (28/12):
      spot_june1_21 = 0+(prev_spot_rate[:-3][0]-0)*((4/12)-0)/(0.5-0)
      spot_dec1_21 = (prev_spot_rate[:-3][0])+(prev_spot_rate[1]-prev_spot_rate[:-3][0])*((10/12)-0.5)/(1-0.5)
      spot_june1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((16/12) - 1)/(1.5-1)
      spot_dec1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((22/12) - 1.5)/(2-1.5)

      spot_func = lambda y: (cpn)/(1+spot_june1_21)**1 + (cpn)/(1+spot_dec1_21)**2 + (cpn)/(1+spot_june1_22)**3 + (cpn)/(1+spot_dec1_22)**4 + (cpn+par)/(1+y)**5 - price
    elif T == (37/12):
      spot_march1_21 = 0 + (prev_spot_rate[:-4][0] - 0)*((1/12)-0)/(0.5-0)
      spot_sept1_21 = prev_spot_rate[:-4][0] + (prev_spot_rate[1] - prev_spot_rate[:-4][0])*((7/12)-0.5)/(1-0.5)
      spot_march1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((13/12) - 1)/(1.5-1)
      spot_sept1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((19/12) - 1.5)/(2-1.5)
      spot_march1_23 = prev_spot_rate[3] + (prev_spot_rate[4]-prev_spot_rate[3]) * ((20/12) - 2)/((2+(28/12))-2)
      # This next rate needed to be linearly interpolated from March 1 2023 - Sept 1 2023 without a 2nd known point after the desired point
      func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn+par)/(1+y)**6 - price
      spot_sept1_23 = optimize.newton(func, guess, tol = 1e-13, maxiter=10000)

      spot_func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn)/(1+spot_sept1_23)**6 + (cpn+par)/(1+y)**7 - price
    elif T == (43/12):
      spot_march1_21 = 0 + (prev_spot_rate[:-5][0] - 0)*((1/12)-0)/(0.5-0)
      spot_sept1_21 = prev_spot_rate[:-5][0] + (prev_spot_rate[1] - prev_spot_rate[:-5][0])*((7/12)-0.5)/(1-0.5)
      spot_march1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((13/12) - 1)/(1.5-1)
      spot_sept1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((19/12) - 1.5)/(2-1.5)
      spot_march1_23 = prev_spot_rate[3] + (prev_spot_rate[4]-prev_spot_rate[3]) * ((20/12) - 2)/((28/12)-2)
      spot_sept1_23 = prev_spot_rate[4] + (prev_spot_rate[5]-prev_spot_rate[4]) * ((31/12) - (2+(28/12)))/((37/12)-(28/12))
      spot_func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn)/(1+spot_sept1_23)**6 + (cpn)/(1+prev_spot_rate[5])**7 + (cpn+par)/(1+y)**8 - price
    elif T == (49/12):
      spot_march1_21 = 0 + (prev_spot_rate[:-6][0] - 0)*((1/12)-0)/(0.5-0)
      spot_sept1_21 = prev_spot_rate[:-6][0] + (prev_spot_rate[1] - prev_spot_rate[:-6][0])*((7/12)-0.5)/(1-0.5)
      spot_march1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((13/12) - 1)/(1.5-1)
      spot_sept1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((19/12) - 1.5)/(2-1.5)
      spot_march1_23 = prev_spot_rate[3] + (prev_spot_rate[4]-prev_spot_rate[3]) * ((20/12) - 2)/((28/12)-2)
      spot_sept1_23 = prev_spot_rate[4] + (prev_spot_rate[5]-prev_spot_rate[4]) * ((31/12) - (2+(28/12)))/((37/12)-(28/12))
      spot_func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn)/(1+spot_sept1_23)**6 + (cpn)/(1+prev_spot_rate[5])**7 + (cpn)/(1+prev_spot_rate[6])**8 + (cpn+par)/(1+y)**9 - price
    elif T == (55/12):
      spot_march1_21 = 0 + (prev_spot_rate[:-7][0] - 0)*((1/12)-0)/(0.5-0)
      spot_sept1_21 = prev_spot_rate[:-7][0] + (prev_spot_rate[1] - prev_spot_rate[:-7][0])*((7/12)-0.5)/(1-0.5)
      spot_march1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((13/12) - 1)/(1.5-1)
      spot_sept1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((19/12) - 1.5)/(2-1.5)
      spot_march1_23 = prev_spot_rate[3] + (prev_spot_rate[4]-prev_spot_rate[3]) * ((20/12) - 2)/((28/12)-2)
      spot_sept1_23 = prev_spot_rate[4] + (prev_spot_rate[5]-prev_spot_rate[4]) * ((31/12) - (2+(28/12)))/((37/12)-(28/12))
      spot_func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn)/(1+spot_sept1_23)**6 + (cpn)/(1+prev_spot_rate[5])**7 + (cpn)/(1+prev_spot_rate[6])**8 + (cpn)/(1+prev_spot_rate[7])**9 + (cpn+par)/(1+y)**10 - price
    elif T == (61/12):
      spot_march1_21 = 0 + (prev_spot_rate[:-8][0] - 0)*((1/12)-0)/(0.5-0)
      spot_sept1_21 = prev_spot_rate[:-8][0] + (prev_spot_rate[1] - prev_spot_rate[:-8][0])*((7/12)-0.5)/(1-0.5)
      spot_march1_22 = prev_spot_rate[1] + (prev_spot_rate[2]-prev_spot_rate[1]) * ((13/12) - 1)/(1.5-1)
      spot_sept1_22 = prev_spot_rate[2] + (prev_spot_rate[3]-prev_spot_rate[2]) * ((19/12) - 1.5)/(2-1.5)
      spot_march1_23 = prev_spot_rate[3] + (prev_spot_rate[4]-prev_spot_rate[3]) * ((20/12) - 2)/((28/12)-2)
      spot_sept1_23 = prev_spot_rate[4] + (prev_spot_rate[5]-prev_spot_rate[4]) * ((31/12) - (2+(28/12)))/((37/12)-(28/12))
      spot_func = lambda y: (cpn)/(1+spot_march1_21)**1 + (cpn)/(1+spot_sept1_21)**2 + (cpn)/(1+spot_march1_22)**3 + (cpn)/(1+spot_sept1_22)**4 + (cpn)/(1+spot_march1_23)**5 + (cpn)/(1+spot_sept1_23)**6 + (cpn)/(1+prev_spot_rate[5])**7 + (cpn)/(1+prev_spot_rate[6])**8 + (cpn)/(1+prev_spot_rate[7])**9 + (cpn)/(1+prev_spot_rate[8])**10 + (cpn+par)/(1+y)**11 - price

    return optimize.newton(spot_func, guess, tol = 1e-13, maxiter=10000)

#Bootstrapping spot curve
spot_rates = {}
#Defining spot rates for 6 month based off YTM for 6 month bonds
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_rates[elem] = df['ytm'+elem][0]

spot_rates

spot_rates = pd.DataFrame(spot_rates, index= ['0'])

#Defining spot rates for 1 year
spot_1 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_1.append(calculating_spot_rates(df[elem][1],100,df['num_months'][1],df['Coupon'][1],spot_rates[elem][0]))

spot_rates.loc[len(spot_rates)] = spot_1

#Defining spot rates for 1.5 year
spot_1_5 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_1_5.append(calculating_spot_rates(df[elem][2],100,df['num_months'][2],df['Coupon'][2],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_1_5

#Defining spot rates for 2 year
spot_2 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_2.append(calculating_spot_rates(df[elem][3],100,df['num_months'][3],df['Coupon'][3],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_2

spot_rates

#Defining spot rates for 2.33 year
spot_2_33 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on June 1 and Dec 1 of each year instead of Aug 1 and Feb 1 like the previous ones - need to interpolate within the function
    spot_2_33.append(calculating_spot_rates(df[elem][4],100,df['num_months'][4],df['Coupon'][4],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_2_33

#Defining spot rates for 3.08 year
spot_3_08 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on March 1 and Sept 1 of each year instead of Aug 1 and Feb 1 like most of the previous ones - need to interpolate within the function
    spot_3_08.append(calculating_spot_rates(df[elem][5],100,df['num_months'][5],df['Coupon'][5],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_3_08

#Defining spot rates for 3.58 year
spot_3_58 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on March 1 and Sept 1 of each year instead of Aug 1 and Feb 1 like most of the previous ones - need to interpolate within the function
    spot_3_58.append(calculating_spot_rates(df[elem][6],100,df['num_months'][6],df['Coupon'][6],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_3_58

#Defining spot rates for 4.08 year
spot_4_08 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on March 1 and Sept 1 of each year instead of Aug 1 and Feb 1 like most of the previous ones - need to interpolate within the function
    spot_4_08.append(calculating_spot_rates(df[elem][7],100,df['num_months'][7],df['Coupon'][7],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_4_08

#Defining spot rates for 4.58 year
spot_4_58 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on March 1 and Sept 1 of each year instead of Aug 1 and Feb 1 like most of the previous ones - need to interpolate within the function
    spot_4_58.append(calculating_spot_rates(df[elem][8],100,df['num_months'][8],df['Coupon'][8],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_4_58

#Defining spot rates for 4.58 year
spot_5_08 = []
for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    #This bond would have coupons on March 1 and Sept 1 of each year instead of Aug 1 and Feb 1 like most of the previous ones - need to interpolate within the function
    spot_5_08.append(calculating_spot_rates(df[elem][9],100,df['num_months'][9],df['Coupon'][9],spot_rates[elem]))

spot_rates.loc[len(spot_rates)] = spot_5_08

from scipy import interpolate
x = df['num_months'][1:]/12
y1 = spot_rates['18-Jan'][1:]
y2 = spot_rates['19-Jan'][1:]
y3 = spot_rates['20-Jan'][1:]
y4 = spot_rates['21-Jan'][1:]
y5 = spot_rates['22-Jan'][1:]
y6 = spot_rates['25-Jan'][1:]
y7 = spot_rates['26-Jan'][1:]
y8 = spot_rates['27-Jan'][1:]
y9 = spot_rates['28-Jan'][1:]
y10 = spot_rates['29-Jan'][1:]

x_new = np.linspace(1, 5.1, 1000)
a_BSpline1 = interpolate.make_interp_spline(x, y1)
y_new1 = a_BSpline1(x_new)
a_BSpline2 = interpolate.make_interp_spline(x, y2)
y_new2 = a_BSpline2(x_new)
a_BSpline3 = interpolate.make_interp_spline(x, y3)
y_new3 = a_BSpline3(x_new)
a_BSpline4 = interpolate.make_interp_spline(x, y4)
y_new4 = a_BSpline4(x_new)
a_BSpline5 = interpolate.make_interp_spline(x, y5)
y_new5 = a_BSpline5(x_new)
a_BSpline6 = interpolate.make_interp_spline(x, y6)
y_new6 = a_BSpline6(x_new)
a_BSpline7 = interpolate.make_interp_spline(x, y7)
y_new7 = a_BSpline7(x_new)
a_BSpline8 = interpolate.make_interp_spline(x, y8)
y_new8 = a_BSpline8(x_new)
a_BSpline9 = interpolate.make_interp_spline(x, y9)
y_new9 = a_BSpline9(x_new)
a_BSpline10 = interpolate.make_interp_spline(x, y10)
y_new10 = a_BSpline10(x_new)

plt.plot(x_new, y_new1)
plt.plot(x_new, y_new2)
plt.plot(x_new, y_new3)
plt.plot(x_new, y_new4)
plt.plot(x_new, y_new5)
plt.plot(x_new, y_new6)
plt.plot(x_new, y_new7)
plt.plot(x_new, y_new8)
plt.plot(x_new, y_new9)
plt.plot(x_new, y_new10)

plt.legend(["Jan 18", "Jan 19", "Jan 20", "Jan 21", "Jan 22", "Jan 25", "Jan 26", "Jan 27", "Jan 28", "Jan 29"])
plt.xlabel('Term to Maturity (years)')
plt.ylabel('Spot rate')
plt.title('1-5 Year Spot Rate curve')

"""Forward Curve Calculation

"""

# 1 year forward curve for 2 - 5 years 
def calculating_1Y_fwd_rates(spot1, T1, spot2, T2):

    r = (1 + spot2)**T2/(1 + spot1)**T1 - 1  

    return r

df

# Defining 1Y forward rates starting at year 1
fwd_rates = {}

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_1 = spot_rates[elem][1]
    spot_2 = spot_rates[elem][3]
    fwd_rates[elem] = calculating_1Y_fwd_rates(spot_1,1,spot_2,2)

fwd_rates = pd.DataFrame(fwd_rates, index= ['0'])

fwd_rates

# Defining 1Y forward rates starting at year 3
fwd_2 = []

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_2 = spot_rates[elem][3]
    spot_3 = spot_rates[elem][4] + (spot_rates[elem][5] - spot_rates[elem][4]) * (3 - 28/12)/(37/12 - 28/12)
    fwd_2.append(calculating_1Y_fwd_rates(spot_2,2,spot_3,3))

fwd_rates.loc[len(fwd_rates)] = fwd_2

# Defining 1Y forward rates starting at year 3
fwd_25 = []

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_25 = spot_rates[elem][4] + (spot_rates[elem][5] - spot_rates[elem][4]) * (2.5 - 28/12)/(37/12 - 28/12)
    spot_35 = spot_rates[elem][5] + (spot_rates[elem][6] - spot_rates[elem][5]) * (3.5 - 37/12)/(43/12 - 37/12)
    fwd_25.append(calculating_1Y_fwd_rates(spot_25,2.5,spot_35,3.5)) 

fwd_rates.loc[len(fwd_rates)] = fwd_25

# Defining 1Y forward rates starting at year 3
fwd_3 = []

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_3 = spot_rates[elem][4] + (spot_rates[elem][5] - spot_rates[elem][4]) * (3 - 28/12)/(37/12 - 28/12)
    spot_4 = spot_rates[elem][6] + (spot_rates[elem][7] - spot_rates[elem][6]) * (4 - 43/12)/(49/12 - 43/12)
    fwd_3.append(calculating_1Y_fwd_rates(spot_3,3,spot_4,4)) 

fwd_rates.loc[len(fwd_rates)] = fwd_3

# Defining 1Y forward rates starting at year 3.5
fwd_35 = []

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_35 = spot_rates[elem][5] + (spot_rates[elem][6] - spot_rates[elem][5]) * (3.5 - 37/12)/(43/12 - 37/12)
    spot_45 = spot_rates[elem][7] + (spot_rates[elem][8] - spot_rates[elem][7]) * (4.5 - 49/12)/(55/12 - 49/12)
    fwd_35.append(calculating_1Y_fwd_rates(spot_35,3.5,spot_45,4.5)) 

fwd_rates.loc[len(fwd_rates)] = fwd_35

# Defining 1Y forward rates starting at year 4
fwd_4 = []

for elem in ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']:
    spot_4 = spot_rates[elem][6] + (spot_rates[elem][7] - spot_rates[elem][6]) * (4 - 43/12)/(49/12 - 43/12)
    spot_5 = spot_rates[elem][8] + (spot_rates[elem][9] - spot_rates[elem][8]) * (5 - 55/12)/(61/12 - 55/12)
    fwd_4.append(calculating_1Y_fwd_rates(spot_4,4,spot_5,5)) 

fwd_rates.loc[len(fwd_rates)] = fwd_4

from scipy import interpolate
x = [1,2,2.5,3,3.5,4]
y1 = fwd_rates['18-Jan']
y2 = fwd_rates['19-Jan']
y3 = fwd_rates['20-Jan']
y4 = fwd_rates['21-Jan']
y5 = fwd_rates['22-Jan']
y6 = fwd_rates['25-Jan']
y7 = fwd_rates['26-Jan']
y8 = fwd_rates['27-Jan']
y9 = fwd_rates['28-Jan']
y10 = fwd_rates['29-Jan']

x_new = np.linspace(1, 4, 1000)
a_BSpline1 = interpolate.make_interp_spline(x, y1)
y_new1 = a_BSpline1(x_new)
a_BSpline2 = interpolate.make_interp_spline(x, y2)
y_new2 = a_BSpline2(x_new)
a_BSpline3 = interpolate.make_interp_spline(x, y3)
y_new3 = a_BSpline3(x_new)
a_BSpline4 = interpolate.make_interp_spline(x, y4)
y_new4 = a_BSpline4(x_new)
a_BSpline5 = interpolate.make_interp_spline(x, y5)
y_new5 = a_BSpline5(x_new)
a_BSpline6 = interpolate.make_interp_spline(x, y6)
y_new6 = a_BSpline6(x_new)
a_BSpline7 = interpolate.make_interp_spline(x, y7)
y_new7 = a_BSpline7(x_new)
a_BSpline8 = interpolate.make_interp_spline(x, y8)
y_new8 = a_BSpline8(x_new)
a_BSpline9 = interpolate.make_interp_spline(x, y9)
y_new9 = a_BSpline9(x_new)
a_BSpline10 = interpolate.make_interp_spline(x, y10)
y_new10 = a_BSpline10(x_new)

plt.plot(x_new, y_new1)
plt.plot(x_new, y_new2)
plt.plot(x_new, y_new3)
plt.plot(x_new, y_new4)
plt.plot(x_new, y_new5)
plt.plot(x_new, y_new6)
plt.plot(x_new, y_new7)
plt.plot(x_new, y_new8)
plt.plot(x_new, y_new9)
plt.plot(x_new, y_new10)

plt.legend(["Jan 18", "Jan 19", "Jan 20", "Jan 21", "Jan 22", "Jan 25", "Jan 26", "Jan 27", "Jan 28", "Jan 29"],loc='best')
plt.xlabel('Term to Maturity (years)')
plt.ylabel('1 Year Forward rate')
plt.title('1-Year Forward Rate curve')

"""Covariance Matrices"""

df

return_matrix = {}
dates = ['ytm18-Jan','ytm19-Jan','ytm20-Jan','ytm21-Jan','ytm22-Jan','ytm25-Jan','ytm26-Jan','ytm27-Jan','ytm28-Jan','ytm29-Jan']
ret_dict = {}
for i in range(0,10): #Loop through bonds
  ret_list = []
  for j in range(0,9): #Loop through dates
    ret = math.log(df[dates[j+1]][i]/df[dates[j]][i])
    ret_list.append(ret)
  ret_dict[i] = ret_list

index1 = list(ret_dict.keys())
ret_df = pd.DataFrame(ret_dict, index= index1[0:9])

ret_df = ret_df.loc[:, [1, 3, 5, 7, 9]]
ret_df = ret_df.T

ret_df

dates = ['18-Jan','19-Jan','20-Jan','21-Jan','22-Jan','25-Jan','26-Jan','27-Jan','28-Jan','29-Jan']
ret_dict_fwd = {}
for i in range(0,6): #Loop through bonds
  ret_list_fwd = []
  for j in range(0,9): #Loop through dates
    if i == 0:
      ret = math.log(fwd_rates[dates[j+1]][:-5]/fwd_rates[dates[j]][:-5])
    else:
      ret = math.log(fwd_rates[dates[j+1]][i]/fwd_rates[dates[j]][i])
    ret_list_fwd.append(ret)
  ret_dict_fwd[i] = ret_list_fwd

index2 = list(ret_dict.keys())
ret_df_fwd = pd.DataFrame(ret_dict_fwd, index= index2[0:9])

ret_df_fwd = ret_df_fwd.loc[:, [0, 1, 3, 5]]
ret_df_fwd = ret_df_fwd.T

ret_df_fwd

cov_yields = np.cov(ret_df)
cov_fwds = np.cov(ret_df_fwd)

cov_yields

eig_vals_yields,eig_vectors_yields = LA.eig(cov_yields)
eig_vals_fwds,eig_vectors_fwds = LA.eig(cov_fwds)

eig_vals_yields

eig_vectors_yields

eig_vals_fwds

x = [1,2,3.08,4.08,5.08]
y1 = eig_vectors_yields[0]
y2 = eig_vectors_yields[1]
y3 = eig_vectors_yields[2]

x_new = np.linspace(1, 5.08, 1000)
a_BSpline1 = interpolate.make_interp_spline(x, y1)
y_new1 = a_BSpline1(x_new)
a_BSpline2 = interpolate.make_interp_spline(x, y2)
y_new3 = a_BSpline2(x_new)
a_BSpline3 = interpolate.make_interp_spline(x, y3)
y_new3 = a_BSpline3(x_new)

plt.plot(x_new, y_new1)
plt.plot(x_new, y_new2)
plt.plot(x_new, y_new3)
# plt.plot(['1yr','2yr','3.08yr','4.08yr', '5.08yr'], eig_vectors_yields[0])
# plt.plot(['1yr','2yr','3.08yr','4.08yr', '5.08yr'], eig_vectors_yields[1])
# plt.plot(['1yr','2yr','3.08yr','4.08yr', '5.08yr'], eig_vectors_yields[2])
plt.legend(["1st PC","2nd PC","3rd PC"],loc='best')
plt.xlabel('Time (years)')
plt.title('CAD Government Bond YTM curve PCA Analysis')

plt.plot(['1yr-1yr','1yr-2yr','1yr-3yr','1yr-4yr'], eig_vectors_fwds[0])
plt.plot(['1yr-1yr','1yr-2yr','1yr-3yr','1yr-4yr'], eig_vectors_fwds[1])
plt.plot(['1yr-1yr','1yr-2yr','1yr-3yr','1yr-4yr'], eig_vectors_fwds[2])
plt.legend(["1st PC","2nd PC","3rd PC"],loc='best')
plt.xlabel('Time (years)')
plt.title('1-Year Forward Rate curve PCA Analysis')